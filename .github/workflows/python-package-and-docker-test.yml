name: Python package and Docker Test
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio pytest-cov
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Detener si hay errores de sintaxis o nombres indefinidos
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Tratar otros errores como advertencias
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check if code compiles
      run: |
        python -c "import src" || echo "Failed to import src package"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
  
  docker-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: apolo-music-bot:test
    
    - name: Test Docker container
      run: |
        # Create a test environment file
        echo "DISCORD_TOKEN=test-token" > .env
        echo "COMMAND_PREFIX=!" >> .env
        
        # Start the container in detached mode with a command that will exit quickly
        docker run --env-file .env --name test-container -d apolo-music-bot:test python -c "print('Docker container started successfully')"
        
        # Check container exit code
        EXIT_CODE=$(docker wait test-container)
        docker logs test-container
        
        # Clean up
        docker rm test-container
        
        # If you want to fail the workflow when the container test fails
        if [ "$EXIT_CODE" != "0" ]; then
          echo "Docker container test failed with exit code $EXIT_CODE"
          exit 1
        fi
